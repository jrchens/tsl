package me.simple.sys.service.impl;

import com.google.common.collect.Lists;
import me.simple.domain.CurrentUser;
import me.simple.domain.Pageable;
import me.simple.domain.${ClazzName};
import me.simple.sys.service.${ClazzName}Service;
import me.simple.util.SQLUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import javax.sql.DataSource;
import java.sql.Timestamp;
import java.util.List;

@Service
@Transactional
public class ${ClazzName}ServiceImpl implements ${ClazzName}Service {

    private static final Logger logger = LoggerFactory.getLogger(${ClazzName}Service.class);
    public static final String tableName = "${tablename}";
    private static final String generatedKeyName = "id";
    private static final List<String> insertColumns = Lists.newArrayList("cruser","crtime");
    private static final List<String> updateColumns = Lists.newArrayList("mduser","mdtime");

    private SimpleJdbcInsert simpleJdbcInsert;
    private JdbcTemplate jdbcTemplate;
    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;

    @Autowired
    public void setDataSource(DataSource dataSource){
        this.simpleJdbcInsert = new SimpleJdbcInsert(dataSource);
        this.simpleJdbcInsert.setTableName(tableName);
        this.simpleJdbcInsert.setGeneratedKeyName(generatedKeyName);
        this.simpleJdbcInsert.setColumnNames(insertColumns);

        this.jdbcTemplate = new JdbcTemplate(dataSource);

        this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
    }

    @Override
    public int save(${ClazzName} ${clazzName} , CurrentUser currentUser) {
        return simpleJdbcInsert.executeAndReturnKey(new BeanPropertySqlParameterSource(${clazzName})).intValue();
    }

    @Override
    public int remove(${ClazzName} ${clazzName} , CurrentUser currentUser) {
        return namedParameterJdbcTemplate.update(SQLUtil.generateRemoveSql(tableName,generatedKeyName),new BeanPropertySqlParameterSource(${clazzName}));
    }

    @Override
    public int update(${ClazzName} ${clazzName} , CurrentUser currentUser) {
        ${clazzName}.setMdtime(new Timestamp(System.currentTimeMillis()));
        ${clazzName}.setMduser("admin");
        return namedParameterJdbcTemplate.update(SQLUtil.generateUpdateSql(tableName,updateColumns,generatedKeyName),new BeanPropertySqlParameterSource(${clazzName}));
    }

    @Override
    @Transactional(readOnly = true)
    public ${ClazzName} get(${ClazzName} ${clazzName} , CurrentUser currentUser) {
        return namedParameterJdbcTemplate.queryForObject(SQLUtil.generateGetSql(tableName,generatedKeyName),new BeanPropertySqlParameterSource(${clazzName}),new BeanPropertyRowMapper<${ClazzName}>(${ClazzName}.class));
    }

    @Override
    @Transactional(readOnly = true)
    public List<${ClazzName}> query(${ClazzName} ${clazzName} , Pageable pageable, CurrentUser currentUser) {
        List<Object> args = Lists.newArrayList();
        StringBuffer buffer = new StringBuffer();
        buffer.append("SELECT * FROM ").append(tableName).append(" ");
        buffer.append("WHERE deleted = 0 ");

        int total = jdbcTemplate.queryForObject(SQLUtil.generateCountSQL(buffer.toString()),args.toArray(),Integer.class);
        pageable.setTotal(total);

        SQLUtil.sortingAndPaging(buffer,pageable);

        return jdbcTemplate.query(buffer.toString(),args.toArray(),new BeanPropertyRowMapper<${ClazzName}>(${ClazzName}.class));
    }
}
